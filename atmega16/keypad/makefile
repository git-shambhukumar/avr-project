#####	space or tab after any command gives error in makefile	#####


##		********** TARGET ZONE **********
# output elf/hex filename
TARGET = app
# target microntroller name
MCU = atmega16



##		********** FILES PATH ***********
# main file (driver code) path
SRC_PATH = src
# device driver source file path
LIB_PATH = lib
# header file path
INC_PATH = include
# target file path
TARGET_PATH = bin
# compiler intermidiate files path
BUILD_PATH = build



##		********** AVR TOOLCHAINS ***********
# avr cross compiler
CC = avr-gcc
# avr hex/binary translator
OBJCOPY = avr-objcopy
# avr object/elf file reader and convert object to assembly
OBJDUMP = avr-objdump
#avr elf file size tool
SIZE_TOOL = avr-size
# file/directory remove tool
RM = rm



##		********* FILES *********
# driver code files
SRC_FILE = $(wildcard $(SRC_PATH)/*.c)
# device driver source files
LIB_FILE = $(wildcard $(LIB_PATH)/*.c)
# all .c files
C_FILE = $(SRC_FILE) $(LIB_FILE)
# output elf filename
ELF_FILE = $(BUILD_PATH)/$(TARGET).elf
# output hex filename
HEX_FILE = $(TARGET_PATH)/$(TARGET).hex
# disassembly file of final elf file
DISASSEMBLY_FILE = $(BUILD_PATH)/disassembly.txt



## 	 ********** FLAGS **********
# compiler flags for warnings, optimization and target MCU name
CC_FLAGS = -g -Wall -Wextra -Os -mmcu=$(MCU)
# include header files
INC_FLAGS = -I $(INC_PATH)
# generate intel hex file, (-g) remove debug info's
OBJCOPY_FLAGS = -O ihex -g
# remove all files, sub-directories and directories
RM_FLAGS = -rf
# avr size tool flags
SIZE_FLAG = --mcu=$(MCU)
# flags to generate dis-assembly of entire object file
OBJDUMP_FLAGS = -D


## 		******** uploading target file to target MCU *********
# programming tool
PROG_TOOL = avrdude
# programmer
PROG_FLAG = -c usbasp
# target microcontroller
MCU_FLAG = -p $(MCU)
# read write mode
RW_MODE = w

# upload target to flash
UPLOAD_FLASH_CODE = -U flash:$(RW_MODE):$(HEX_FILE):i

# upload fuse bits
# m -> write immediate values specified 
L_FUSE = 0xFF
H_FUSE = 0xD9
E_FUSE = 0xFF
UPDATE_FUSE_BITS = -U lfuse:w:0xFF:m -U hfuse:w:0xD9:m



##		$@ -> target files 
##		$^ -> pre-requisites

# check fuse bits
test: 
	$(PROG_TOOL) $(PROG_FLAG) $(MCU_FLAG) -v


# update fuse bits
fuse: 
	$(PROG_TOOL) $(PROG_FLAG) $(MCU_FLAG) $(UPDATE_FUSE_BITS)

# generate disassembly code of elf file 
disassembly: $(ELF_FILE)
	$(OBJDUMP) $(OBJDUMP_FLAGS) $^ >> $(DISASSEMBLY_FILE)


# find elf(linux executable and linkable format) file size
size: $(ELF_FILE)
	$(SIZE_TOOL) $(SIZE_FLAG) $^


# upload hex code to target microcontroller
upload_flash:	$(HEX_FILE)
	$(PROG_TOOL) $(PROG_FLAG) $(MCU_FLAG) $(UPLOAD_FLASH_CODE)



# make hex
hex: $(HEX_FILE)

# copy and translate elf file to hex file
$(HEX_FILE): $(ELF_FILE)
	$(OBJCOPY) $(OBJCOPY_FLAGS) $^ $@



# make elf
elf: $(ELF_FILE)

# compile and link, .c and .o files to create elf file with header files dependencies
$(ELF_FILE): $(C_FILE)
	$(CC) $(CC_FLAGS) $(INC_FLAGS) -o $@ $^



# unique clean cmd, not confuse with other "clean" terms
.PHONY: clean

# remove all intermediate and final files generated by build system
# except hex file
clean:
	$(RM) $(RM_FLAGS) $(BUILD_PATH)/*

TARGET = app			# output elf/hex filename
MCU = atmega16			# target microntroller name

SRC_PATH = src			# main file (driver code) path
LIB_PATH = lib			# device driver source file path
INC_PATH = include		# header file path
TARGET_PATH = bin		# target file path
BUILD_PATH = build		# intermediate build files path

CC = avr-gcc			# avr cross compiler
OBJCOPY = avr-objcopy	# avr hex/binary translator
RM = rm					# file/directory remove tool

SRC_FILE = $(wildcard $(SRC_PATH)/*.c)	# driver code files
LIB_FILE = $(wildcard $(LIB_PATH)/*.c)	# device driver source files
C_FILE = $(SRC_FILE) $(LIB_FILE)		# all .c files

ELF_FILE = $(BUILD_PATH)/$(TARGET).elf	# output elf filename
HEX_FILE = $(TARGET_PATH)/$(TARGET).hex	# output hex filename

# compiler flags for warnings, optimization and target MCU name
CC_FLAGS = -Wall -Wextra -Os -mmcu=$(MCU)
INC_FLAGS = -I $(INC_PATH)				# include header files
OBJCOPY_FLAGS = -O ihex -g				# generate intel hex file, (-g) remove debug info's
RM_FLAGS = -r -f						# remove all files, sub-directories and directories



hex: $(HEX_FILE)	# make hex

# copy and translate elf file to hex file
$(HEX_FILE): $(ELF_FILE)
	$(OBJCOPY) $(OBJCOPY_FLAGS) $^ $@


elf: $(ELF_FILE)	# make elf

# compile and link, .c and .o files to create elf file with header files dependencies
$(ELF_FILE): $(C_FILE)
	$(CC) $(CC_FLAGS) $(INC_FLAGS) -o $@ $^


.PHONY: clean		# unique clean cmd, not confuse with other "clean" terms
# remove all intermediate and final files generated by build system
clean:
	$(RM) $(RM_FLAGS) *.elf *.hex *.map *.s *.i *.o
